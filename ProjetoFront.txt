Path: ProjetoEscolha\frontend\vite.config.ts
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';

export default defineConfig({
  plugins: [react()],
  base: '/ProjetoEscolha/', // Defina o base corretamente
});


Path: ProjetoEscolha\frontend\src\App.tsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import QuestPage from './QuestPage';
import ErrorPage from './ErrorPage';

const App: React.FC = () => {
  return (
    <Routes>
      <Route path="/" element={<QuestPage initialQuestId="A000" />} />
      <Route path="/error" element={<ErrorPage />} />
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
};

export default App;


Path: ProjetoEscolha\frontend\src\ErrorPage.tsx
import React from 'react';
import { Box, Button, Text, VStack } from '@chakra-ui/react';

const ErrorPage: React.FC = () => {
  const handleGoHome = () => {
    window.location.href = '/';
  };

  return (
    <Box textAlign="center" p={4} height="100vh" display="flex" alignItems="center" justifyContent="center">
      <VStack spacing={4}>
        <Text fontSize="2xl">Caminho em construção</Text>
        <Button colorScheme="teal" onClick={handleGoHome}>
          Voltar ao início
        </Button>
      </VStack>
    </Box>
  );
};

export default ErrorPage;


Path: ProjetoEscolha\frontend\src\main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { ChakraProvider } from '@chakra-ui/react';
import App from './App';

ReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(
  <React.StrictMode>
    <ChakraProvider>
      <BrowserRouter basename="/">
        <App />
      </BrowserRouter>
    </ChakraProvider>
  </React.StrictMode>
);


Path: ProjetoEscolha\frontend\src\QuestPage.tsx
import React, { useState, useEffect } from 'react';
import { Box, Button, Text, VStack, HStack } from '@chakra-ui/react';
import { useNavigate } from 'react-router-dom';
import questData from './assets/quests.json';
import { Quest, QuestData } from './types';

const fetchQuest = (id: string, data: QuestData): Quest | null => {
  return data.quest[id] || null;
};

const QuestPage: React.FC<{ initialQuestId: string }> = ({ initialQuestId }) => {
  const [currentQuest, setCurrentQuest] = useState<Quest | null>(fetchQuest(initialQuestId, questData as QuestData));
  const [questHistory, setQuestHistory] = useState<string[]>([initialQuestId]);
  const navigate = useNavigate();

  useEffect(() => {
    const quest = fetchQuest(initialQuestId, questData as QuestData);
    if (quest === null) {
      navigate('/ProjetoEscolha/error');
    } else {
      setCurrentQuest(quest);
    }
  }, [initialQuestId]);

  const handleAnswerClick = (idCaminho: string) => {
    const quest = fetchQuest(idCaminho, questData as QuestData);
    if (quest === null) {
      navigate('/ProjetoEscolha/error');
    } else {
      setCurrentQuest(quest);
      setQuestHistory([...questHistory, idCaminho]);
      navigate(`/ProjetoEscolha`);
    }
  };

  const getImagePath = (imageName: string) => {
    return new URL(`./assets/images/${imageName}`, import.meta.url).href;
  };

  if (!currentQuest) {
    return null;
  }

  return (
    <Box
      height="100vh"
      width="100vw"
      backgroundImage={`url(${getImagePath(currentQuest.PlanoDeFundo)})`}
      backgroundPosition="center"
      backgroundRepeat="no-repeat"
      backgroundSize="cover"
    >
      <VStack
        height="100%"
        justify="space-between"
        p={4}
        color="white"
        textShadow="1px 1px 2px black"
      >
        <Text fontSize="2xl" mt={4}>{currentQuest.TextoQuest}</Text>
        <HStack spacing={4} mb={4}>
          {Object.keys(currentQuest.Respostas).map((key) => {
            const resposta = currentQuest.Respostas[key];
            return (
              <Button
                key={key}
                onClick={() => handleAnswerClick(resposta.ID_Caminho)}
                colorScheme="teal"
                variant="solid"
              >
                {resposta.texto}
              </Button>
            );
          })}
        </HStack>
      </VStack>
    </Box>
  );
};

export default QuestPage;


Path: ProjetoEscolha\frontend\src\types.d.ts
export type Resposta = {
    texto: string;
    ID_Caminho: string;
  };
  
  export type Quest = {
    ID_Quest: string;
    PlanoDeFundo: string;
    TextoQuest: string;
    Respostas: Record<string, Resposta>;
  };
  
  export type QuestData = {
    quest: Record<string, Quest>;
  };
  

Path: ProjetoEscolha\frontend\src\vite-env.d.ts
/// <reference types="vite/client" />


